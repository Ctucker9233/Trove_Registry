{"version":3,"sources":["pages/LandingPage.js","pages/LogInPage.js","pages/Sign-UpPage.js","utils/themeUtil.js","App.js","registerServiceWorker.js","index.js"],"names":["LandingPage","react_default","a","createElement","LoginPage","SignupPage","theme","createMuiTheme","palette","primary","light","main","dark","secondary","typography","fontFamily","h1","fontStyle","h2","h3","h4","h5","h6","overrides","MuiButton","root","borderRadius","App","react_router_dom","ThemeProvider","react_router","exact","path","component","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qQAWeA,EATK,WAChB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,uDCEGC,EANG,WACd,OACIH,EAAAC,EAAAC,cAAA,gCCgGOE,EAjGI,WAiDf,OAEIJ,EAAAC,EAAAC,cAAA,yCCnBOG,EAjCDC,YAAe,CACzBC,QAAS,CACLC,QAAS,CACLC,MAAO,UACPC,KAAM,UACNC,KAAM,WAEVC,UAAW,CACPH,MAAO,UACPC,KAAM,UACNC,KAAM,YAGdE,WAAY,CACRC,WAAY,oCACZC,GAAI,CACAD,WAAY,0CAA2CE,UAAW,UAEtEC,GAAI,yCACJC,GAAI,yCACJC,GAAI,yCACJC,GAAI,yCACJC,GAAI,0CAERC,UAAW,CACPC,UAAW,CACPC,KAAM,CACFC,aAAc,YCFfC,mLAfX,OACE1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KACE3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAevB,MAAOA,GACpBL,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,KACE7B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjC,IACjCC,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAW7B,IACtCH,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAW5B,cARjC6B,aCAZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KChEjEC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBnB,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB3B,OAAOC,UAC3C2B,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,OAAQ,WAC9B,IAAMxB,EAAK,GAAAyB,OAAMH,GAAN,sBAEN7B,EAwCX,SAAiCO,GAE/B0B,MAAM1B,GACHI,KAAK,SAAAuB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C9B,UAAUC,cAAc8B,MAAM5B,KAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,KAAK,WAC7BT,OAAOC,SAASsC,aAKpBnC,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEAzDAsB,CAAwBnC,GAHxBD,EAAgBC,MC7BxBoC","file":"static/js/main.81ea17e2.chunk.js","sourcesContent":["import React from 'react'\n\nconst LandingPage = () => {\n    return (\n        <div>\n            <h1>Welcome to Trove!</h1>\n            <p>This is the start of something beautiful</p>\n        </div>\n    )\n}\n\nexport default LandingPage","import React from 'react'\n\nconst LoginPage = () => {\n    return (\n        <div>Hello Login Page</div>\n    )\n}\n\nexport default LoginPage","import React, { useState } from 'react'\n//import axios from 'axios'\n\nconst SignupPage = () => {\n\n    // const [user, setUser] = useState();\n\n\n    // constructor() {\n    //     super()\n    //     this.state = {\n    //         username: '',\n    //         password: '',\n    //         confirmPassword: '',\n\n    //     }\n    //     this.handleSubmit = this.handleSubmit.bind(this)\n    //     this.handleChange = this.handleChange.bind(this)\n    // }\n    // handleChange(event) {\n    //     this.setState({\n    //         [event.target.name]: event.target.value\n    //     })\n    // }\n    // handleSubmit(event) {\n    //     console.log('sign-up handleSubmit, username: ')\n    //     console.log(this.state.username)\n    //     event.preventDefault()\n\n    //     //request to server to add a new username/password\n    //     axios.post('/user/', {\n    //         username: this.state.username,\n    //         password: this.state.password\n    //     })\n    //         .then(response => {\n    //             console.log(response)\n    //             if (!response.data.errmsg) {\n    //                 console.log('successful signup')\n    //                 this.setState({ //redirect to login page\n    //                     redirectTo: '/login'\n    //                 })\n    //             } else {\n    //                 console.log('username already taken')\n    //             }\n    //         }).catch(error => {\n    //             console.log('signup error: ')\n    //             console.log(error)\n\n    //         })\n    // }\n\n\n    return (\n\n        <div>Hello Signup Page</div>\n        // <div className=\"SignupForm\">\n        //     <h4>Sign up</h4>\n        //     <form className=\"form-horizontal\">\n        //         <div className=\"form-group\">\n        //             <div className=\"col-1 col-ml-auto\">\n        //                 <label className=\"form-label\" htmlFor=\"username\">Username</label>\n        //             </div>\n        //             <div className=\"col-3 col-mr-auto\">\n        //                 <input className=\"form-input\"\n        //                     type=\"text\"\n        //                     id=\"username\"\n        //                     name=\"username\"\n        //                     placeholder=\"Username\"\n        //                     value={this.state.username}\n        //                     onChange={this.handleChange}\n        //                 />\n        //             </div>\n        //         </div>\n        //         <div className=\"form-group\">\n        //             <div className=\"col-1 col-ml-auto\">\n        //                 <label className=\"form-label\" htmlFor=\"password\">Password: </label>\n        //             </div>\n        //             <div className=\"col-3 col-mr-auto\">\n        //                 <input className=\"form-input\"\n        //                     placeholder=\"password\"\n        //                     type=\"password\"\n        //                     name=\"password\"\n        //                     value={this.state.password}\n        //                     onChange={this.handleChange}\n        //                 />\n        //             </div>\n        //         </div>\n        //         <div className=\"form-group \">\n        //             <div className=\"col-7\"></div>\n        //             <button\n        //                 className=\"btn btn-primary col-1 col-mr-auto\"\n        //                 onClick={this.handleSubmit}\n        //                 type=\"submit\"\n        //             >Sign up</button>\n        //         </div>\n        //     </form>\n        // </div>\n    )\n}\n\nexport default SignupPage","import { createMuiTheme } from '@material-ui/core';\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            light: '#84c887',\n            main: '#66bb6a',\n            dark: '#47824a'\n        },\n        secondary: {\n            light: '#51d1e1',\n            main: '#26c6da',\n            dark: '#1a8a98'\n        },\n    },\n    typography: {\n        fontFamily: 'Montserrat, Helvetica, Sans-Serif',\n        h1: {\n            fontFamily: 'Lato, Lucida-Grande, Tahoma, Sans-Serif', fontStyle: 'italic'\n        },\n        h2: 'Lato Lucida-Grande, Tahoma, Sans-Serif',\n        h3: 'Lato Lucida-Grande, Tahoma, Sans-Serif',\n        h4: 'Lato Lucida-Grande, Tahoma, Sans-Serif',\n        h5: 'Lato Lucida-Grande, Tahoma, Sans-Serif',\n        h6: 'Lato Lucida-Grande, Tahoma, Sans-Serif',\n    },\n    overrides: { //override a specific feature of the component we name below\n        MuiButton: {\n            root: {\n                borderRadius: '25px'\n            }\n        }\n    }\n});\n\nexport default theme\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { ThemeProvider } from \"@material-ui/styles\"\n// import Button from \"@material-ui/core/Button\"\nimport LandingPage from './pages/LandingPage'\nimport LoginPage from './pages/LogInPage'\nimport SignupPage from './pages/Sign-UpPage'\n\nimport theme from './utils/themeUtil'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <ThemeProvider theme={theme}>\n          <Switch>\n            <Route exact path='/' component={LandingPage} />\n            <Route exact path='/login' component={LoginPage} />\n            <Route exact path='/signup' component={SignupPage} />\n            {/*<Route exact path='/mytrove' component={TrovePage} />*/}\n          </Switch>\n        </ThemeProvider>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}